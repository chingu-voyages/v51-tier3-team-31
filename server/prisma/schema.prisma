// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// NOTES:
// @@map("....") is used to map table names on DB
// @map("....") is used to map field names on DB

// How Timestamps Work: 
// createdAt - This field is automatically set to the date and time when the document is first created. 
// updatedAt - This field is automatically set to the date and time whenever the document is updated.

// NOTES:
// @@map("....") is used to map table names on DB
// @map("....") is used to map field names on DB

// How Timestamps Work: 
// createdAt - This field is automatically set to the date and time when the document is first created. 
// updatedAt - This field is automatically set to the date and time whenever the document is updated.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "sqlite"
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  googleId String @unique @map("google_id")
  name     String
  email    String @unique

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Lists from Relations
  userExpenseGroups UserExpenseGroup[] // Where this user is a Participant on 
  expenseGroups     ExpenseGroup[] // Expense Groups created by this user
  invitations       Invitations[] // Invitations sent by this user

  // Mapping table name in DB
  @@map("users")
}

model ExpenseGroup {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  budget      Decimal @default(0) @db.Decimal(10, 2)

  createdBy Int @map("created_by") // the userId

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Lists from Relations
  expenses          Expense[]
  userExpenseGroups UserExpenseGroup[]

  // Relations
  user        User          @relation(fields: [createdBy], references: [id])
  Invitations Invitations[]

  // Mapping table name in DB
  @@map("expense_groups")
}

model UserExpenseGroup {
  id                 Int      @id @default(autoincrement())
  userId             Int
  expenseGroupId     Int      @map("expense_group_id")
  contributionWeight Int      @default(0) @map("contribution_weight") // Must be [0, 10, 20... 90, 100]
  description        String
  locked             Boolean  @default(false)
  lockedAt           DateTime @map("locked_at")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  expenseGroup ExpenseGroup @relation(fields: [expenseGroupId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id])

  // Constraints
  @@unique([userId, expenseGroupId], name: "User_ExpenseGroup_Unique")
  // Mapping table name in DB
  @@map("user_expensegroup")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Lists from Relations
  expenses Expense[]

  // Mapping table name in DB
  @@map("categories")
}

model Expense {
  id             Int     @id @default(autoincrement())
  expenseGroupId Int     @map("expense_group_id")
  name           String
  description    String
  categoryId     Int     @map("category_id")
  amount         Decimal @default(0) @db.Decimal(10, 2)
  createdBy      Int
  receiptURL     String  @map("receipt_url")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  category     Category     @relation(fields: [categoryId], references: [id])
  expenseGroup ExpenseGroup @relation(fields: [expenseGroupId], references: [id], onDelete: Cascade)

  // Mapping table name in DB
  @@map("expenses")
}

model Invitation {
  id             Int    @id @default(autoincrement())
  expenseGroupId Int    @map("expense_group_id")
  sentBy         Int    @map("sent_by") // the userId that sent the invitation
  invitedEmail   String @map("invited_email") // the email that was invited
  status         String // Invitation Status: "Pending" || "Accepted" || "Rejected"

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  sender       User         @relation(fields: [sentBy], references: [id])
  expenseGroup ExpenseGroup @relation(fields: [expenseGroupId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([expenseGroupId, invitedEmail], name: "ExpenseGroup_Email_Unique") // for an ExpenseGroup, an email can be invited only once
  // Mapping table name in DB
  @@map("invitations")
}
